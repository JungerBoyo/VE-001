#version 450 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 2) uniform MeshingDescriptor {
    uint vbo_offsets[6];
    uint max_submesh_size_in_quads;
    vec3 chunk_position;
    ivec3 chunk_size;
};

layout(std430, binding = 5) readonly buffer VoxelData {
    uint voxel_data[];
};

struct Vertex {
    vec3 position;
    vec3 texcoord;
};

layout(std430, binding = 6) buffer MeshingTemp {
    uint written_quads[6]; // = { +x, -x, +y, -y, +z, -z }
    uint axes_steps[6];
    uint overflow_flag;
};

layout(std430, binding = 7) writeonly buffer MeshData {
    float vbo[];
};

shared uint local_mesh_quads_count;

const vec3 VERTICES[8] = {
    vec3(0.0, 0.0, 0.0), // 0
    vec3(0.0, 0.0, 1.0), // 1
    vec3(0.0, 1.0, 0.0), // 2 
    vec3(0.0, 1.0, 1.0), // 3
    vec3(1.0, 0.0, 0.0), // 4
    vec3(1.0, 0.0, 1.0), // 5
    vec3(1.0, 1.0, 0.0), // 6
    vec3(1.0, 1.0, 1.0)  // 7
};
const vec2 TEX_COORDS[4] = {
    vec2(0.0, 0.0),
    vec2(1.0, 0.0),
    vec2(1.0, 1.0),
    vec2(0.0, 1.0)
};
const uint QUADS[6][4] = {
    { 5, 4, 6, 7 },
    { 0, 1, 3, 2 },
    { 2, 3, 7, 6 },
    { 4, 5, 1, 0 },
    { 1, 5, 7, 3 },
    { 4, 0, 2, 6 }
};


void main() {
    uint face_id = gl_WorkGroupID.x;
    uint face_id_in_indices = face_id * 6;
    uint axis_step = gl_LocalInvocationID.x + axes_steps[face_id];
    uint axis_id = face_id / 2;

    ///         START          ///
    if (gl_LocalInvocationIndex == 0) {
        local_mesh_quads_count = written_quads[face_id];
    }
    memoryBarrierShared();
    barrier();
    //////////////////////////////
    if (axis_step < chunk_size[axis_id]) {

    uvec3 logical_indices = uvec3((axis_id + 1) % 3, (axis_id + 2) % 3, axis_id);
    uvec3 real_indices = uvec3(
        (2 + axis_id * 2) % 3,
        (0 + axis_id * 2) % 3,
        (1 + axis_id * 2) % 3
    );
    
    // positions the args in logical way where 
    // Z - is the current axis
    // X, Y - are extents of the plane perpedicular to the axis
    ivec3 logical_extent = ivec3(
        chunk_size[logical_indices[0]],
        chunk_size[logical_indices[1]],
        chunk_size[logical_indices[2]]
    );

    // depending on the meshing axis (eg. pos/neg), 
    int edge_value = (face_id % 2) == 1 ? 0 : logical_extent[2] - 1;
    int polarity   = (face_id % 2) == 1 ?-1 : 1;

    uvec2 squashed_extent_logical_indices = axis_id == 0 ? uvec2(1, 0) : uvec2(0, 1);

    uint states[128];
    for (int i=0; i<128; ++i) {
        states[i] = 0;
    }

    const int plane_size = logical_extent[0] * logical_extent[1];
    ivec3 i = ivec3(0, 0, int(axis_step));
    
    bool any_visible = false;
    /// Fill the visibility query
    for (;i[1] < logical_extent[1]; ++i[1]) {
        i[0] = 0;
        for (;i[0] < logical_extent[0]; ++i[0]) {
            uint voxel_index = i[real_indices[0]] + i[real_indices[1]] * chunk_size.x + i[real_indices[2]] * plane_size;
            if (bitfieldExtract(voxel_data[voxel_index >> 1], int((voxel_index & uint(1)) << 4), 16) > 0) {
                if (i[2] == edge_value) {
                    uint state_index = i[0] + i[1] * logical_extent[0];
                    states[state_index >> 5] |= (uint(1) << (state_index & uint(31)));
                    any_visible = true;
                    continue;
                }
                i[2] += polarity;
                voxel_index = i[real_indices[0]] + i[real_indices[1]] * chunk_size.x + i[real_indices[2]] * plane_size;      
                if (bitfieldExtract(voxel_data[voxel_index >> 1], int((voxel_index & uint(1)) << 4), 16) == 0) {
                    uint state_index = i[0] + i[1] * logical_extent[0];
                    states[state_index >> 5] |= (uint(1) << (state_index & uint(31)));
                    any_visible = true;
                }
                i[2] -= polarity;
            }
        }
    }
    if (any_visible) {
    i[1] = 0;
    for (;i[1] < logical_extent[1]; ++i[1]) {
        i[0] = 0;
        while(i[0] < logical_extent[0]) {
            uint state_index = i[0] + i[1] * logical_extent[0];
            if ((states[state_index >> 5] & (uint(1) << (state_index & uint(31)))) != 0) {
                uint voxel_index = i[real_indices[0]] + i[real_indices[1]] * chunk_size.x + i[real_indices[2]] * plane_size;
                uint voxel_value = bitfieldExtract(voxel_data[voxel_index >> 1], int((voxel_index & uint(1)) << 4), 16);

                ivec3 mesh_region = ivec3(1, 0, 0);
                for (;i[0] + mesh_region[0] < logical_extent[0]; ++mesh_region[0]) {
                    state_index = (i[0] + mesh_region[0]) + i[1] * logical_extent[0];
                    if ((states[state_index >> 5] & (uint(1) << (state_index & uint(31)))) != 0) {
                        voxel_index = 
                            (i[real_indices[0]] + mesh_region[real_indices[0]]) + 
                            (i[real_indices[1]] + mesh_region[real_indices[1]]) * chunk_size.x + 
                            (i[real_indices[2]] + mesh_region[real_indices[2]]) * plane_size;
                        uint next_voxel_value = bitfieldExtract(voxel_data[voxel_index >> 1], int((voxel_index & uint(1)) << 4), 16);
                        if (next_voxel_value != voxel_value) {
                           break; 
                        }
                        // continue;
                    } else {
                        break;
                    }
                }
                mesh_region[1] = 1;

                int mesh_region_0 = mesh_region[0];
                mesh_region[0] = 0;
                for (;i[1] + mesh_region[1] < logical_extent[1]; ++mesh_region[1]) {
                    uvec3 tmp_mesh_region = uvec3(0);
                    bool _break = false;
                    for (;i[0] + tmp_mesh_region[0] < i[0] + mesh_region_0; ++tmp_mesh_region[0]) {
                        state_index = (i[0] + tmp_mesh_region[0]) + (i[1] + mesh_region[1]) * logical_extent[0];
                        if ((states[state_index >> 5] & (uint(1) << (state_index & uint(31)))) != 0) {
                            // continue;
                            voxel_index = 
                                (i[real_indices[0]] + tmp_mesh_region[real_indices[0]] + mesh_region[real_indices[0]]) + 
                                (i[real_indices[1]] + tmp_mesh_region[real_indices[1]] + mesh_region[real_indices[1]]) * chunk_size.x + 
                                (i[real_indices[2]] + tmp_mesh_region[real_indices[2]] + mesh_region[real_indices[2]]) * plane_size;
                            uint next_voxel_value = bitfieldExtract(voxel_data[voxel_index >> 1], int((voxel_index & uint(1)) << 4), 16);
                            if (next_voxel_value != voxel_value) {
                                _break = true;
                                break;
                            }
                        } else {
                            _break = true;
                            break;
                        }
                    }
                    if (_break) {
                        break;
                    }
                }
                mesh_region[0] = mesh_region_0;

                ivec3 region_extent = ivec3(0);
                region_extent[logical_indices[2]] = 1;
                region_extent[logical_indices[1]] = mesh_region[1];
                region_extent[logical_indices[0]] = mesh_region[0];

                ivec2 squashed_region_extent = ivec2(
                    mesh_region[squashed_extent_logical_indices[0]],
                    mesh_region[squashed_extent_logical_indices[1]]
                );

                vec3 region_offset = chunk_position;
                region_offset[logical_indices[2]] += float(i[2]);
                region_offset[logical_indices[1]] += float(i[1]);
                region_offset[logical_indices[0]] += float(i[0]);

                uint base_quad_index = atomicAdd(local_mesh_quads_count, 1);

                if (base_quad_index >= max_submesh_size_in_quads) {
                    overflow_flag = 1;
                } else {
                    uint base_vertices_index = base_quad_index * 24; // (6 * 4) == 24
                    float voxel_value_encoded = float(6 * (voxel_value - 1));

                    Vertex vertex;

                    vertex.position = vec3(region_extent) * VERTICES[QUADS[face_id][0]] + region_offset;
                    vertex.texcoord = vec3(vec2(squashed_region_extent * TEX_COORDS[0]), voxel_value_encoded + float(face_id));
                    vbo[vbo_offsets[face_id] + base_vertices_index + (0*6) + 0] = vertex.position[0];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (0*6) + 1] = vertex.position[1];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (0*6) + 2] = vertex.position[2];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (0*6) + 3] = vertex.texcoord[0];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (0*6) + 4] = vertex.texcoord[1];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (0*6) + 5] = vertex.texcoord[2];
                    
                    vertex.position = vec3(region_extent) * VERTICES[QUADS[face_id][1]] + region_offset;
                    vertex.texcoord = vec3(vec2(squashed_region_extent * TEX_COORDS[1]), voxel_value_encoded + float(face_id));
                    vbo[vbo_offsets[face_id] + base_vertices_index + (1*6) + 0] = vertex.position[0];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (1*6) + 1] = vertex.position[1];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (1*6) + 2] = vertex.position[2];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (1*6) + 3] = vertex.texcoord[0];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (1*6) + 4] = vertex.texcoord[1];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (1*6) + 5] = vertex.texcoord[2];
                    
                    vertex.position = vec3(region_extent) * VERTICES[QUADS[face_id][2]] + region_offset;
                    vertex.texcoord = vec3(vec2(squashed_region_extent * TEX_COORDS[2]), voxel_value_encoded + float(face_id));
                    vbo[vbo_offsets[face_id] + base_vertices_index + (2*6) + 0] = vertex.position[0];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (2*6) + 1] = vertex.position[1];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (2*6) + 2] = vertex.position[2];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (2*6) + 3] = vertex.texcoord[0];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (2*6) + 4] = vertex.texcoord[1];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (2*6) + 5] = vertex.texcoord[2];
                    
                    vertex.position = vec3(region_extent) * VERTICES[QUADS[face_id][3]] + region_offset;
                    vertex.texcoord = vec3(vec2(squashed_region_extent * TEX_COORDS[3]), voxel_value_encoded + float(face_id));
                    vbo[vbo_offsets[face_id] + base_vertices_index + (3*6) + 0] = vertex.position[0];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (3*6) + 1] = vertex.position[1];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (3*6) + 2] = vertex.position[2];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (3*6) + 3] = vertex.texcoord[0];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (3*6) + 4] = vertex.texcoord[1];
                    vbo[vbo_offsets[face_id] + base_vertices_index + (3*6) + 5] = vertex.texcoord[2];
                }
                
                for (int y = i[1]; y < i[1] + mesh_region[1]; ++y) {
                    for (int x = i[0]; x < i[0] + mesh_region[0]; ++x) {
                        uint state_index = x + y * logical_extent[0];
                        states[state_index >> 5] &= ~(uint(1) << (state_index & uint(31)));
                    }
                }

                i[0] += mesh_region[0];
            } else {
                ++i[0];
            }
        }
    }
    }
    }
    ///         END         ///
    memoryBarrierShared();
    barrier();
    if (gl_LocalInvocationIndex == 0) {
        written_quads[face_id] += local_mesh_quads_count;
        axes_steps[face_id] += gl_WorkGroupSize.x;
    }
    ///////////////////////////////
}
